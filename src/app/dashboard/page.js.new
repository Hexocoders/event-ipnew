'use client';

import Link from 'next/link';
import Image from 'next/image';
import { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import ProtectedRoute from '../components/ProtectedRoute';
import { supabase } from '../lib/supabaseClient';
import Sidebar from '../components/Sidebar';
import { useRouter } from 'next/navigation';
import TicketModal from '../components/TicketModal';

function DashboardContent() {
  const router = useRouter();
  const [sortBy, setSortBy] = useState('Sales');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { user } = useAuth();
  const [userData, setUserData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Add state for dashboard data
  const [salesData, setSalesData] = useState([]);
  const [premiumTiersData, setPremiumTiersData] = useState([]);
  const [events, setEvents] = useState([]);
  const [eventStats, setEventStats] = useState({
    revenue: 0,
    rawRevenue: 0,
    adjustedRevenue: false,
    ticketsSold: 0,
    freeTickets: 0,
    paidTickets: 0,
    totalTickets: 0,
    shares: 0,
    privateEventsCount: 0,
    premiumTiersCount: 0
  });
  
  // Add ticket modal state
  const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  
  // Handle opening the ticket modal for a specific premium tier
  const handleOpenTicketModal = (tier) => {
    // Find the related event based on the tier's eventId
    const event = events?.find(e => e.id === tier.eventId);
    if (event) {
      setSelectedEvent({
        ...event,
        title: event.name,
        // Make sure the ticket_tiers include this specific premium tier at the top of the list
        ticket_tiers: event.ticket_tiers ? 
          [
            // Put the selected premium tier first
            ...event.ticket_tiers.filter(t => t.id === tier.tierId),
            // Then add all other tiers
            ...event.ticket_tiers.filter(t => t.id !== tier.tierId)
          ] : []
      });
      setIsTicketModalOpen(true);
    }
  };
  
  // Add pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [premiumTiersPage, setPremiumTiersPage] = useState(1);
  const itemsPerPage = 5;

  // Get user data from localStorage on component mount (client-side only)
  useEffect(() => {
    try {
      const storedUser = localStorage.getItem('user');
      if (storedUser) {
        setUserData(JSON.parse(storedUser));
      }
    } catch (error) {
      console.error('Error reading from localStorage:', error);
    }
  }, []);

  // Fetch dashboard data from Supabase
  useEffect(() => {
    const fetchDashboardData = async () => {
      // Existing fetch implementation...
      // (Same as in your current file)
    };
    
    fetchDashboardData();
  }, []);
  
  // Extract user information
  const firstName = userData?.first_name || 'User';
  const lastName = userData?.last_name || '';
  const email = userData?.email || '';
  const fullName = `${firstName} ${lastName}`.trim();

  // Display error message if there is an error
  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-slate-50 p-4">
        <div className="w-full max-w-md p-8 bg-white rounded-xl shadow-md border border-slate-200">
          <div className="text-center py-6">
            <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-red-100 text-red-500 mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h2 className="text-xl font-semibold text-slate-800 mb-2">Error loading dashboard data</h2>
            <p className="text-slate-600 mb-6">{error}</p>
            <button 
              onClick={fetchDashboardData} 
              className="px-4 py-2 bg-gradient-to-r from-indigo-600 to-blue-500 text-white rounded-lg hover:from-indigo-700 hover:to-blue-600 transition-all duration-300 shadow-md"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-slate-50 p-4">
        <div className="relative flex flex-col items-center">
          <div className="w-16 h-16 border-4 border-indigo-200 border-t-indigo-600 rounded-full animate-spin"></div>
          <div className="mt-4 text-slate-600 font-medium text-center">Loading dashboard...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar />
      
      <div className="flex-1 overflow-auto">
        {/* Main Dashboard Content */}
        <div className="flex min-h-screen bg-slate-50">
          {/* Mobile Sidebar Overlay */}
          {isMobileMenuOpen && (
            <div 
              className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
              onClick={() => setIsMobileMenuOpen(false)}
            />
          )}

          {/* Main Content */}
          <div className="flex-1 w-full md:ml-0">
            {/* Top Header */}
            <header className="bg-white border-b border-slate-200 sticky top-0 z-10 shadow-sm">
              <div className="flex flex-col md:flex-row justify-between items-start md:items-center px-4 md:px-8 py-4 space-y-4 md:space-y-0">
                <div className="w-full md:w-auto">
                  <div className="text-sm text-slate-500 mb-1">Account / Dashboard</div>
                  <h1 className="text-2xl font-semibold text-slate-800">Dashboard</h1>
                </div>
                <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 w-full md:w-auto">
                  <Link href="/create-event" className="w-full sm:w-auto px-4 py-2 bg-gradient-to-r from-indigo-600 to-blue-500 text-white rounded-lg hover:from-indigo-700 hover:to-blue-600 transition-all duration-300 shadow-md text-center">
                    + Create event
                  </Link>
                  <div className="flex items-center gap-4 w-full sm:w-auto justify-between sm:justify-start">
                    <div className="flex items-center gap-3">
                      <div className="w-9 h-9 rounded-full bg-gradient-to-r from-indigo-600 to-blue-500 flex items-center justify-center text-white font-medium shadow-md">
                        {firstName.charAt(0)}{lastName.charAt(0)}
                      </div>
                      <div className="hidden sm:block">
                        <div className="text-sm font-medium text-slate-800">{fullName}</div>
                        <div className="text-xs text-slate-500">{email}</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </header>

            {/* Dashboard Content */}
            <div className="p-4 md:p-8">
              {/* Stats Grid */}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-8">
                {/* Revenue Card */}
                <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-lg transition-shadow border border-slate-200 relative overflow-hidden group">
                  <div className="absolute inset-0 bg-gradient-to-r from-indigo-600/5 to-blue-500/5 transform scale-x-0 group-hover:scale-x-100 transition-transform origin-left"></div>
                  <div className="relative">
                    <div className="flex items-center justify-between mb-4">
                      <div className="text-indigo-500 bg-indigo-100 p-2 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className="text-3xl font-bold text-slate-800">â‚¦ {eventStats.revenue.toLocaleString()}</div>
                    <div className="text-sm text-slate-500 mt-1">Total Revenue</div>
                    {eventStats.adjustedRevenue && (
                      <div className="text-xs text-slate-500 mt-1">
                        Adjusted for payment withdrawals
                      </div>
                    )}
                  </div>
                </div>

                {/* Tickets Sold Card */}
                <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-lg transition-shadow border border-slate-200 relative overflow-hidden group">
                  <div className="absolute inset-0 bg-gradient-to-r from-indigo-600/5 to-blue-500/5 transform scale-x-0 group-hover:scale-x-100 transition-transform origin-left"></div>
                  <div className="relative">
                    <div className="flex items-center justify-between mb-4">
                      <div className="text-blue-500 bg-blue-100 p-2 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                        </svg>
                      </div>
                    </div>
                    <div className="text-3xl font-bold text-slate-800">{eventStats.ticketsSold}<span className="text-slate-400 text-xl">/{eventStats.totalTickets}</span></div>
                    <div className="text-sm text-slate-500 mt-1">Tickets Sold</div>
                    <div className="text-xs text-slate-600 mt-1">
                      <span className="text-indigo-500">{eventStats.paidTickets} paid</span> Â· 
                      <span className="text-green-500 ml-1">{eventStats.freeTickets} free</span>
                    </div>
                  </div>
                </div>

                {/* Private Events Card */}
                <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-lg transition-shadow border border-slate-200 relative overflow-hidden group">
                  <div className="absolute inset-0 bg-gradient-to-r from-indigo-600/5 to-blue-500/5 transform scale-x-0 group-hover:scale-x-100 transition-transform origin-left"></div>
                  <div className="relative">
                    <div className="flex items-center justify-between mb-4">
                      <div className="text-purple-500 bg-purple-100 p-2 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                      </div>
                    </div>
                    <div className="text-3xl font-bold text-slate-800">{eventStats.privateEventsCount}</div>
                    <div className="text-sm text-slate-500 mt-1">Private Events</div>
                  </div>
                </div>
              </div>

              {/* Premium Ticket Tiers Section */}
              <div className="bg-white rounded-xl p-4 md:p-6 mb-8 shadow-md border border-slate-200">
                <div className="flex flex-col space-y-4 md:space-y-0 md:flex-row justify-between items-start md:items-center mb-6">
                  <div className="flex items-center gap-2">
                    <div className="text-amber-500 bg-amber-100 p-2 rounded-lg">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
                      </svg>
                    </div>
                    <h2 className="text-lg font-medium text-slate-800">Premium Ticket Tiers</h2>
                  </div>
                  <div>
                    <span className="text-sm text-slate-500 bg-slate-100 py-1 px-2 rounded-md">Total: {premiumTiersData.length} premium tiers</span>
                  </div>
                </div>

                {/* Premium Tiers Table */}
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="text-left text-sm text-slate-500 border-b border-slate-200">
                        <th className="pb-4 pl-2">Tier Name</th>
                        <th className="pb-4">Event</th>
                        <th className="pb-4">Date</th>
                        <th className="pb-4">Price</th>
                        <th className="pb-4">Availability</th>
                        <th className="pb-4">Revenue</th>
                        <th className="pb-4">Action</th>
                      </tr>
                    </thead>
                    <tbody>
                      {premiumTiersData.length > 0 ? (
                        premiumTiersData
                          .slice((premiumTiersPage - 1) * itemsPerPage, premiumTiersPage * itemsPerPage)
                          .map((tier) => (
                          <tr key={tier.id} className="border-b border-slate-100 hover:bg-slate-50 transition-colors">
                            <td className="py-4 pl-2">
                              <div className="flex items-center gap-3">
                                <div className="h-8 w-8 rounded-full bg-amber-100 flex items-center justify-center text-amber-600">
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                                  </svg>
                                </div>
                                <div>
                                  <span className="font-medium text-slate-800">{tier.tierName}</span>
                                  {tier.tierDescription && (
                                    <div className="text-xs text-slate-500 truncate max-w-xs">{tier.tierDescription}</div>
                                  )}
                                </div>
                              </div>
                            </td>
                            <td className="py-4 text-slate-800">{tier.eventName}</td>
                            <td className="py-4">
                              <div>
                                <div className="text-slate-800">{tier.eventDate}</div>
                                <div className={`inline-block px-2 py-1 rounded-full text-xs ${tier.statusColor} shadow-sm`}>
                                  {tier.status}
                                </div>
                              </div>
                            </td>
                            <td className="py-4 text-slate-800">{tier.price}</td>
                            <td className="py-4">
                              <div className="flex items-center gap-2">
                                <div className="w-16 h-2 bg-gray-200 rounded-full overflow-hidden">
                                  <div 
                                    className={`h-full rounded-full ${
                                      tier.availableQuantity === 0 
                                        ? 'bg-red-500' 
                                        : tier.availableQuantity < (tier.totalQuantity * 0.2) 
                                          ? 'bg-orange-500' 
                                          : 'bg-green-500'
                                    }`} 
                                    style={{ width: `${Math.max(0, 100 - ((tier.soldQuantity / tier.totalQuantity) * 100))}%` }}
                                  ></div>
                                </div>
                                <span className="text-sm">
                                  {tier.availableQuantity === 0 
                                    ? <span className="text-red-500 font-medium">Sold Out</span> 
                                    : <span>
                                        <span className="font-medium">{tier.availableQuantity}</span> of {tier.totalQuantity} tickets remaining
                                      </span>
                                  }
                                </span>
                              </div>
                            </td>
                            <td className="py-4 text-slate-800 font-medium">{tier.revenue}</td>
                            <td className="py-4">
                              {tier.availableQuantity > 0 && new Date(tier.eventDate) > new Date() && (
                                <button
                                  onClick={() => handleOpenTicketModal(tier)}
                                  className="px-3 py-1.5 bg-gradient-to-r from-amber-500 to-orange-400 text-white rounded-lg text-xs hover:from-amber-600 hover:to-orange-500 transition-all duration-300 shadow-sm flex items-center gap-1"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                                  </svg>
                                  Buy Ticket
                                </button>
                              )}
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr className="border-b border-slate-100">
                          <td colSpan="7" className="py-8 text-center text-slate-500">
                            <div className="flex flex-col items-center justify-center">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-amber-300 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                              </svg>
                              <p>No premium ticket tiers found. Create an event with premium tiers to see them here.</p>
                              <Link href="/create-event" className="mt-3 px-4 py-2 bg-gradient-to-r from-amber-500 to-orange-400 text-white rounded-lg text-sm hover:from-amber-600 hover:to-orange-500 transition-all duration-300 shadow-md">
                                Create Event with Premium Tiers
                              </Link>
                            </div>
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Ticket Modal for Premium Tickets */}
      <TicketModal
        event={selectedEvent}
        isOpen={isTicketModalOpen}
        onClose={() => setIsTicketModalOpen(false)}
      />
    </div>
  );
}

export default function Dashboard() {
  return (
    <ProtectedRoute>
      <DashboardContent />
    </ProtectedRoute>
  );
} 